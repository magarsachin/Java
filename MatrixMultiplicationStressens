
// Matrix multiplication using stressens method
class TestMatrixMultiplyStressens {
	public int[][] multiply(int [][]A,int [][]B){
		
		int n = A.length;
		int C[][] = new int[n][n];
		
		if (n==1){
			C[0][0] = A[0][0] * B[0][0];
		     return C; 
		}
		else{ 
			int A11[][] = split(A,n,0,n/2-1,0,n/2-1); 
		    int A12[][] = split(A,n,0,n/2-1,n/2,n-1);
		    int A21[][] = split(A,n,n/2,n-1,0,n/2-1);
    		int A22[][] = split(A,n,n/2,n-1,n/2,n-1);
			int B11[][] = split(B,n,0,n/2-1,0,n/2-1);
			int B12[][] = split(B,n,0,n/2-1,n/2,n-1);
			int B21[][] = split(B,n,n/2,n-1,0,n/2-1);
	    	int B22[][] = split(B,n,n/2,n-1,n/2,n-1);
	    	
	    	int [][]S1 = subtract(B12,B22);
	    	int [][]S2 = add(A11,A12);
	    	int [][]S3 = add(A21,A22);
	    	int [][]S4 = subtract(B21,B11);
	    	int [][]S5 = add(A11,A22);
	    	int [][]S6 = add(B11,B22);
	    	int [][]S7 = subtract(A12,A22);
	    	int [][]S8 = add(B21,B22);
	    	int [][]S9 = subtract(A11,A21);
	    	int [][]S10 = add(B11,B12);
	    	
	    	int [][]P1 = multiply(A11,S1);
	    	int [][]P2 = multiply(S2,B22);
	    	int [][]P3 = multiply(S3,B11);
	    	int [][]P4 = multiply(A22,S4);
	    	int [][]P5 = multiply(S5,S6);
	    	int [][]P6 = multiply(S7,S8);
	    	int [][]P7 = multiply(S9,S10);
	    	
	    	int [][] C11 = add(P5,subtract(P4,add(P2,P6)));
	    	int [][] C12 = add(P1,P2);
	    	int [][] C21 = add(P3,P4);
	    	int [][] C22 = add(P5,subtract(P1,subtract(P3,P7)));
	    

		    C = merge(C11,C12,C21,C22);
		}
		return C;
   
	}
	public int[][] split(int A[][],int n,int istart,int iend, int jstart, int jend){
		int splitedMatrix [][] = new int [n/2][n/2];
		int i,j,k,l;
		for ( i=istart,k =0;k < n/2 && i <= iend;i++,k++){
			   for(j=jstart,l=0;j<=jend && l< n/2 ;j++,l++){
				   splitedMatrix[k][l]= A[i][j];				   
			   }	
	}
		return splitedMatrix;
	}

public int[][] add (int [][]A,int [][]B){
	int addition[][] = new int [A.length][A.length];
		   for (int i=0;i<A.length;i++)
			   for(int j=0;j<A.length;j++){
				   addition[i][j]=A[i][j]+B[i][j];
			   }
           return addition;
}
public int[][] subtract (int [][]A,int [][]B){
	int subtraction[][] = new int [A.length][A.length];
		   for (int i=0;i<A.length;i++)
			   for(int j=0;j<A.length;j++){
				   subtraction[i][j]=A[i][j]-B[i][j];
			   }
           return subtraction;
}
public int[][] merge (int [][]C11, int[][]C12,int [][]C21, int [][]C22){
	int [][] C = new int[C11.length *2][C11.length *2];
	int i,j,k,l;
	for (i=0;i <C11.length;i++){
		for (j=0; j<C11.length;j++)
			C[i][j] = C11[i][j];
		for (k=0;j<C12.length*2;j++,k++)  
			C[i][j] = C12[i][k];
	}
	for (k=0;i<C11.length*2;i++,k++){
		for (j=0; j<C11.length;j++)
			C[i][j] = C21[k][j];
		for (l=0;j<C12.length*2;j++,l++)  
			C[i][j] = C22[k][l];
	}
	return C;
}
}
public class MatrixMultiplyStressens {
public static void main(String[] args) {
	int [][]A = {{1,2,1,5}, {1,2,4,1}, {2,4,1,7}, {5,1,4,3}};
	int [][]B = {{2,2,2,2}, {2,2,2,2}, {2,2,2,2}, {2,2,2,2}};
 int C[][] = new int[A.length][A.length];
 
 TestMatrixMultiplyStressens ob = new TestMatrixMultiplyStressens();
   
    C = ob.multiply(A,B);
 
    for (int i=0;i <C.length;i++){
		for (int j=0; j<C.length;j++)
			System.out.print(C[i][j]+ " ");
		System.out.println();
    }
	}
}



