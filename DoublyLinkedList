
// Implementation of doubly linked list and operations like
// Search, insert, delete and display

class DNode{
	int data;
	DNode next;
	DNode prev;

//Default constructor. Mostly used for root node	
	public DNode (){
		data = 0;
       // pointing to self so no node points to null
		next = this;
		prev = this;		
	}
//	constructor for new node
	public DNode (int d){
		data = d;
	}
}

class DList{
	int size = 0;
	DNode root = new DNode();
	
	public void addEnd (int element){
		DNode node = new DNode(element);
		if (size == 0){
			root.next = node;
			root.prev = node;
			node.prev = root;
			node.next = root;
			size++;
		}
		else {
			root.prev.next = node;
			node.prev = root.prev;
			node.next = root;
			root.prev = node;
			size++;
		}
	}
	public void addFront(int element){
		DNode node = new DNode(element);
		if (size == 0){
			root.next = node;
			root.prev = node;
			node.prev = root;
			node.next = root;
			size++;
		  }
		else {
			root.next.prev = node;
			node.next =root.next;
			node.prev = root;
			root.next = node;
			size++;
		}
	}
	public void insert(int position, int element) {
		DNode node = new DNode(element);
		if (position > size)
			System.out.println("Position greater than size of list");
		else if (position == 1)
			this.addFront(element);
		else if (position == size)
			this.addEnd(element);
		else {
			DNode temp = root.next;
			int count = 1;
			while (count < position){
				temp = temp.next;
				count++;
			}
			temp.next.prev = node;
			node.next = temp.next;
			temp.next = node;
			node.prev = temp;
			size++;
		}
	}
	public void delete(int position){
		if (position > size)
			System.out.println("Position greater than size of list");
		else if (position == 1){
			root.next.next.prev = root;
			root.next = root.next.next;
		}
		else if (position == size){
			root.prev.prev.next = root;
			root.prev = root.prev.prev;
		}
		else {
			int count = 1;
			DNode temp = root;
			while (count < position){
				temp = temp.next;
				count++;
			}
			temp.next.next.prev = temp;
			temp.next = temp.next.next;
		}
	}
	public void display(){
		if (size == 0){
		  System.out.println("List is empty");
		  }
		else {
			 DNode temp = root.next; 
			 System.out.println("List is  :");
			 while (temp != root){
				 System.out.print(temp.data+" ");
				 temp = temp.next;
			 }
			 System.out.println();
		  }
	}
 }
public class DoublyLinkedList {
 public static void main(String[] args) {
	DList list = new DList();
	list.addEnd(1);
	list.display();
	list.addEnd(3);
	list.display();
	list.addFront(0);
	list.display();
	list.insert(5,2);
	list.insert(1,2);
	list.insert(4,2);
	list.insert(2,2);
	list.display();
	list.delete(3);
	list.display();
}
}
